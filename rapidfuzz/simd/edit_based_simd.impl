
namespace rf = rapidfuzz;

bool LCSseqSimilarityInit(RF_ScorerFunc* self, const RF_Kwargs*, int64_t str_count, const RF_String* str)
{
    if (str_count == 1)
        return similarity_init<rf::CachedLCSseq, int64_t>(self, str_count, str);

    return multi_similarity_init<rf::MultiLCSseq, int64_t>(self, str_count, str);
}

bool LCSseqNormalizedSimilarityInit(RF_ScorerFunc* self, const RF_Kwargs*, int64_t str_count, const RF_String* str)
{
    if (str_count == 1)
        return normalized_similarity_init<rf::CachedLCSseq, double>(self, str_count, str);

    return multi_normalized_similarity_init<rf::MultiLCSseq, double>(self, str_count, str);
}

bool LCSseqDistanceInit(RF_ScorerFunc* self, const RF_Kwargs*, int64_t str_count, const RF_String* str)
{
    if (str_count == 1)
        return distance_init<rf::CachedLCSseq, int64_t>(self, str_count, str);

    return multi_distance_init<rf::MultiLCSseq, int64_t>(self, str_count, str);
}

bool LCSseqNormalizedDistanceInit(RF_ScorerFunc* self, const RF_Kwargs*, int64_t str_count, const RF_String* str)
{
    if (str_count == 1)
        return normalized_distance_init<rf::CachedLCSseq, double>(self, str_count, str);

    return multi_normalized_distance_init<rf::MultiLCSseq, double>(self, str_count, str);
}

function(create_cython_target _name)
    if(EXISTS ${CMAKE_CURRENT_LIST_DIR}/${_name}.cxx)
        set(${_name} ${CMAKE_CURRENT_LIST_DIR}/${_name}.cxx PARENT_SCOPE)
    else()
        find_package(Cython REQUIRED)
        # should use target_include_directories once this is supported by scikit-build
        include_directories(${RF_BASE_DIR}/rapidfuzz ${RF_BASE_DIR}/rapidfuzz/distance)
        add_cython_target(${_name} CXX)
        set(${_name} ${_name} PARENT_SCOPE)
    endif()
endfunction(create_cython_target)

if (CMAKE_SYSTEM_PROCESSOR MATCHES "(x86_64)|(X86_64)|(amd64)|(AMD64)")
    set(X64 TRUE)
endif()

if (X64)
    add_library(CpuInfo STATIC ${RF_BASE_DIR}/rapidfuzz/FeatureDetector/CpuInfo.cpp)
    target_compile_features(CpuInfo PUBLIC cxx_std_14)

    add_library(edit_based_avx2 STATIC ${RF_BASE_DIR}/rapidfuzz/simd/avx2/edit_based_avx2.cpp)
    target_compile_features(edit_based_avx2 PUBLIC cxx_std_14)
    target_include_directories(edit_based_avx2 PRIVATE ${RF_CAPI_PATH} ${RF_BASE_DIR}/rapidfuzz ${RF_BASE_DIR}/rapidfuzz/distance)
    target_link_libraries(edit_based_avx2 PRIVATE rapidfuzz::rapidfuzz jaro_winkler::jaro_winkler)
    if (MSVC)
        set_target_properties(edit_based_avx2 PROPERTIES COMPILE_FLAGS "/ARCH:AVX2")
    else()
        set_target_properties(edit_based_avx2 PROPERTIES COMPILE_FLAGS "-mavx2")
    endif()

    add_library(edit_based_sse2 STATIC ${RF_BASE_DIR}/rapidfuzz/simd/sse2/edit_based_sse2.cpp)
    target_compile_features(edit_based_sse2 PUBLIC cxx_std_14)
    target_include_directories(edit_based_sse2 PRIVATE ${RF_CAPI_PATH} ${RF_BASE_DIR}/rapidfuzz ${RF_BASE_DIR}/rapidfuzz/distance)
    target_link_libraries(edit_based_sse2 PRIVATE rapidfuzz::rapidfuzz jaro_winkler::jaro_winkler)
    if (MSVC)
        set_target_properties(edit_based_sse2 PROPERTIES COMPILE_FLAGS "/ARCH:SSE2")
    else()
        set_target_properties(edit_based_sse2 PROPERTIES COMPILE_FLAGS "-msse2")
    endif()
endif()

create_cython_target(_initialize)
add_library(_initialize MODULE ${_initialize})
target_compile_features(_initialize PUBLIC cxx_std_14)
target_include_directories(_initialize PRIVATE ${RF_CAPI_PATH} ${RF_BASE_DIR}/rapidfuzz ${RF_BASE_DIR}/rapidfuzz/distance)
target_link_libraries(_initialize PRIVATE rapidfuzz::rapidfuzz jaro_winkler::jaro_winkler)
python_extension_module(_initialize)
install(TARGETS _initialize LIBRARY DESTINATION rapidfuzz/distance)

create_cython_target(Hamming)
add_library(Hamming MODULE ${Hamming})
target_compile_features(Hamming PUBLIC cxx_std_14)
target_include_directories(Hamming PRIVATE ${RF_CAPI_PATH} ${RF_BASE_DIR}/rapidfuzz ${RF_BASE_DIR}/rapidfuzz/distance)
target_link_libraries(Hamming PRIVATE rapidfuzz::rapidfuzz jaro_winkler::jaro_winkler)
if (X64)
    target_link_libraries(Hamming PRIVATE edit_based_avx2 edit_based_sse2 CpuInfo)
endif()
python_extension_module(Hamming)
install(TARGETS Hamming LIBRARY DESTINATION rapidfuzz/distance)

create_cython_target(Levenshtein)
add_library(Levenshtein MODULE ${Levenshtein})
target_compile_features(Levenshtein PUBLIC cxx_std_14)
target_include_directories(Levenshtein PRIVATE ${RF_CAPI_PATH} ${RF_BASE_DIR}/rapidfuzz ${RF_BASE_DIR}/rapidfuzz/distance)
target_link_libraries(Levenshtein PRIVATE rapidfuzz::rapidfuzz jaro_winkler::jaro_winkler)
if (X64)
    target_link_libraries(Levenshtein PRIVATE edit_based_avx2 edit_based_sse2 CpuInfo)
endif()
python_extension_module(Levenshtein)
install(TARGETS Levenshtein LIBRARY DESTINATION rapidfuzz/distance)

create_cython_target(Indel)
add_library(Indel MODULE ${Indel})
target_compile_features(Indel PUBLIC cxx_std_14)
target_include_directories(Indel PRIVATE ${RF_CAPI_PATH} ${RF_BASE_DIR}/rapidfuzz ${RF_BASE_DIR}/rapidfuzz/distance)
target_link_libraries(Indel PRIVATE rapidfuzz::rapidfuzz jaro_winkler::jaro_winkler)
if (X64)
    target_link_libraries(Indel PRIVATE edit_based_avx2 edit_based_sse2 CpuInfo)
endif()
python_extension_module(Indel)
install(TARGETS Indel LIBRARY DESTINATION rapidfuzz/distance)

create_cython_target(LCSseq)
add_library(LCSseq MODULE ${LCSseq})
target_compile_features(LCSseq PUBLIC cxx_std_14)
target_include_directories(LCSseq PRIVATE ${RF_CAPI_PATH} ${RF_BASE_DIR}/rapidfuzz ${RF_BASE_DIR}/rapidfuzz/distance)
target_link_libraries(LCSseq PRIVATE rapidfuzz::rapidfuzz jaro_winkler::jaro_winkler)
if (X64)
    target_link_libraries(LCSseq PRIVATE edit_based_avx2 edit_based_sse2 CpuInfo)
endif()
python_extension_module(LCSseq)
install(TARGETS LCSseq LIBRARY DESTINATION rapidfuzz/distance)
